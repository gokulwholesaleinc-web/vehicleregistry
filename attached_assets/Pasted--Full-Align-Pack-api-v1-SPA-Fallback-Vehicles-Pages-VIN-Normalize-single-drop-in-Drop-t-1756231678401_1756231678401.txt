# Full Align Pack — /api/v1 + SPA Fallback + Vehicles Pages + VIN Normalize (single drop‑in)

Drop these snippets into your repo to fix:

* API base mismatch (**force /api/v1 everywhere**)
* 404 on `/vehicles` & `/vehicles/:id` (**SPA fallback in dev + prod**)
* Navigation after create (use `route()`)
* Normalized response shapes `{ ok, data }`
* Transmission normalization (Manual/DCT/AMT/CVT)
* Vehicles list + detail (with AI insights shown)
* Google Sign‑In CSP allow‑list

> Adjust import paths to match your project. Order of middleware matters — follow the notes.

---

## 1) Server — main Express app (mount /api/v1, static, SPA fallback)

**File:** `server/http/app.ts` (or your main server entry)

```ts
import express from 'express';
import path from 'node:path';
import cookieParser from 'cookie-parser';
import { security } from './security';
import apiRouter from './routes'; // will export a router mounted at /api/v1

export const app = express();
app.use(express.json({ limit: '10mb' }));
app.use(cookieParser());
app.use(security); // Helmet CSP incl. Google GSI allow‑list

// --- All API routes under /api/v1 ---
app.use('/api/v1', apiRouter);

// --- Static client ---
const clientDir = path.join(process.cwd(), 'client', 'dist');
app.use(express.static(clientDir));

// --- SPA fallback (dev + prod). MUST come after API + static.
app.get(/^(?!\/api\/).*/, (_req, res) => {
  res.sendFile(path.join(clientDir, 'index.html'));
});
```

---

## 2) Helmet CSP (Google Sign‑In allow‑list)

**File:** `server/http/security.ts`

```ts
import helmet from 'helmet';

export const security = helmet({
  contentSecurityPolicy: {
    useDefaults: true,
    directives: {
      'script-src': ["'self'", 'https://accounts.google.com', 'https://apis.google.com'],
      'frame-src':  ["'self'", 'https://accounts.google.com'],
      'connect-src': ["'self'", 'https:', 'wss:', 'https://accounts.google.com', 'https://apis.google.com'],
      'img-src': ["'self'", 'data:', 'https://*.gstatic.com', 'https://accounts.google.com'],
    },
  },
  crossOriginEmbedderPolicy: false,
});
```

---

## 3) API Router (groups all /api/v1 routes)

**File:** `server/http/routes/index.ts`

```ts
import { Router } from 'express';
import vinRouter from './vin';
import vehiclesRouter from './vehicles';
import notificationsRouter from './notifications';

const r = Router();
r.use('/vin', vinRouter);              // POST /api/v1/vin/decode
r.use('/vehicles', vehiclesRouter);    // CRUD vehicles
r.use('/notifications', notificationsRouter);
export default r;
```

---

## 4) Auth guard (placeholder)

**File:** `server/http/middleware/auth.ts`

```ts
import { Request, Response, NextFunction } from 'express';

export function requireAuth(req: Request, res: Response, next: NextFunction){
  // Replace with real JWT/session logic
  const user = (req as any).user || { id: 'demo-user' };
  (req as any).user = user;
  next();
}
```

---

## 5) VIN decode with transmission normalization

**File:** `server/http/routes/vin.ts`

```ts
import { Router } from 'express';
import rateLimit from 'express-rate-limit';

const router = Router();
const limiter = rateLimit({ windowMs: 60_000, max: 20 });
const Base = 'https://vpic.nhtsa.dot.gov/api/vehicles';

function normalizeTransmission(row: any): string | null {
  const parts = [row.TransmissionDescriptor, row.TransmissionStyle, row.Transmission]
    .filter(Boolean).map(String);
  const txt = parts.join(' ').toLowerCase();
  const speeds = row.TransmissionSpeeds || row.NumberOfForwardGears;
  const has = (re: RegExp) => re.test(txt);
  if (has(/dual\s*clutch|\bdct\b/)) return 'Dual Clutch';
  if (has(/automated\s*manual|\bamt\b/)) return 'Automated Manual';
  if (has(/continuously\s*variable|\bcvt\b/)) return 'CVT';
  if (has(/manual|\bm\/t\b|\bstick\b/)) return speeds ? `${speeds}-Speed Manual` : 'Manual';
  if (has(/automatic|\ba\/t\b/)) return speeds ? `${speeds}-Speed Automatic` : 'Automatic';
  if (speeds && parts[0]) return `${speeds}-Speed ${parts[0]}`;
  return parts[0] || null;
}

// POST /api/v1/vin/decode { vin, mileage? }
router.post('/decode', limiter, async (req, res) => {
  const vin = String((req.body?.vin||'')).trim().toUpperCase();
  if (!vin || vin.length !== 17) {
    return res.status(400).json({ ok:false, error:{ message:'VIN must be 17 characters' } });
  }
  try {
    const resp = await fetch(`${Base}/DecodeVinValues/${encodeURIComponent(vin)}?format=json`);
    if (!resp.ok) return res.status(502).json({ ok:false, error:{ message:'VIN service unavailable' } });
    const json: any = await resp.json();
    const row = json?.Results?.[0] || {};

    const vehicle = {
      vin,
      make: row.Make || null,
      model: row.Model || null,
      modelYear: row.ModelYear ? Number(row.ModelYear) : null,
      trim: row.Trim || null,
      bodyClass: row.BodyClass || null,
      engine: [row.EngineManufacturer, row.EngineModel].filter(Boolean).join(' ') || null,
      cylinders: row.EngineCylinders ? Number(row.EngineCylinders) : null,
      displacement: row.DisplacementL ? Number(row.DisplacementL) : null,
      transmission: normalizeTransmission(row),
      driveType: row.DriveType || null,
      plantCountry: row.PlantCountry || null,
      fuelType: row.FuelTypePrimary || null,
      mileage: req.body?.mileage ?? null,
    };

    return res.json({ ok:true, data: vehicle });
  } catch (e) {
    console.error('VIN decode error', e);
    return res.status(500).json({ ok:false, error:{ message:'VIN decode failed' } });
  }
});

export default router;
```

---

## 6) Vehicles routes (list, detail, create‑from‑vin)

**File:** `server/http/routes/vehicles.ts`

```ts
import { Router } from 'express';
import { requireAuth } from '../middleware/auth';

const r = Router();
const db: any[] = []; // replace with real DB

// GET /api/v1/vehicles
r.get('/', requireAuth, (req,res)=>{
  const userId = (req as any).user.id;
  res.json({ ok:true, data: db.filter(v => v.userId === userId) });
});

// GET /api/v1/vehicles/:id
r.get('/:id', requireAuth, (req,res)=>{
  const userId = (req as any).user.id;
  const item = db.find(v => String(v.id) === req.params.id && v.userId === userId);
  if (!item) return res.status(404).json({ ok:false, error:{ message:'Not found' } });
  res.json({ ok:true, data: item });
});

// POST /api/v1/vehicles/create-from-vin
r.post('/create-from-vin', requireAuth, (req,res)=>{
  const userId = (req as any).user.id;
  const b = req.body || {};
  const required = ['vin','make','model','year'];
  for (const k of required) if (!b[k]) return res.status(400).json({ ok:false, error:{ message:`Missing ${k}` } });
  const item = {
    id: db.length+1,
    userId,
    vin: b.vin,
    year: b.year,
    make: b.make,
    model: b.model,
    trim: b.trim || null,
    engine: b.engine || null,
    transmission: b.transmission || null,
    fuelType: b.fuelType || null,
    bodyStyle: b.bodyStyle || null,
    drivetrain: b.drivetrain || b.driveType || null,
    mileage: b.mileage ?? 0,
    aiInsights: b.aiInsights ?? null,
    createdAt: new Date(),
  };
  db.push(item);
  res.json({ ok:true, data: { id: item.id } });
});

export default r;
```

---

## 7) Notifications (example shape)

**File:** `server/http/routes/notifications.ts`

```ts
import { Router } from 'express';
import { requireAuth } from '../middleware/auth';

const r = Router();
const store: Record<string, any[]> = {};

r.get('/unread/count', requireAuth, (req,res)=>{
  const uid = (req as any).user.id;
  const list = store[uid] || [];
  res.json({ ok:true, data: list.filter(n => !n.read).length });
});

export default r;
```

---

## 8) Client API helper (forces /api/v1, normalized errors)

**File:** `client/src/lib/api.ts`

```ts
function safeBase(): string {
  const sameOrigin = `${location.origin}/api/v1`;
  const env = (import.meta.env as any)?.VITE_API_BASE?.trim();
  if (!env) return sameOrigin;
  if (env.startsWith('http://localhost')) return sameOrigin;
  if (env.startsWith('/')) return `${location.origin}${env}`;
  try { if (new URL(env).origin !== location.origin) return sameOrigin; } catch { return sameOrigin; }
  return env;
}
export const API_BASE = safeBase();
export function getToken(){ return localStorage.getItem('vg.jwt'); }
export function setToken(t:string|null){ t?localStorage.setItem('vg.jwt',t):localStorage.removeItem('vg.jwt'); }
export async function api(path:string, init: RequestInit = {}){
  const headers = new Headers(init.headers);
  if (!headers.has('Content-Type') && init.body) headers.set('Content-Type','application/json');
  const t = getToken(); if (t) headers.set('Authorization', `Bearer ${t}`);
  const res = await fetch(`${API_BASE}${path}`, { ...init, headers, credentials:'include' });
  let json:any=null; try{ json = await res.json(); }catch{}
  if (res.status===401){ throw new Error(json?.error?.message || 'Unauthorized'); }
  if (!res.ok){ throw new Error(json?.error?.message || res.statusText); }
  return json; // expect { ok, data }
}
if (typeof window!=='undefined') console.info('[VG] API_BASE =', API_BASE);
```

---

## 9) Client routes (wouter)

**File:** `client/src/App.tsx`

```tsx
import { Route, Switch } from 'wouter';
import Dashboard from '@/pages/dashboard';
import VehiclesPage from '@/pages/vehicles';
import VehicleDetailPage from '@/pages/vehicle-detail';

export default function App(){
  return (
    <Switch>
      <Route path="/" component={Dashboard} />
      <Route path="/dashboard" component={Dashboard} />
      <Route path="/vehicles" component={VehiclesPage} />
      <Route path="/vehicles/:id" component={VehicleDetailPage} />
      <Route>
        <div className="p-10 text-center">
          <div className="text-2xl font-semibold">404 Page Not Found</div>
          <div className="text-muted-foreground mt-2">Did you forget to add the page to the router?</div>
        </div>
      </Route>
    </Switch>
  );
}
```

---

## 10) Vehicles list page

**File:** `client/src/pages/vehicles.tsx`

```tsx
import { useQuery } from '@tanstack/react-query';
import { Link } from 'wouter';
import { api } from '@/lib/api';

export default function VehiclesPage(){
  const { data, isLoading, error } = useQuery({
    queryKey: ['/api/v1/vehicles'],
    queryFn: () => api('/vehicles').then(r=>r.data),
  });

  if (isLoading) return <div className="p-6">Loading…</div>;
  if (error) return <div className="p-6 text-red-600">{String((error as Error).message)}</div>;
  const items = data ?? [];

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-2xl font-semibold">My Vehicles</h1>
      {items.length===0 && <div>No vehicles yet.</div>}
      <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {items.map((v:any)=> (
          <Link key={v.id} href={`/vehicles/${v.id}`} className="block border rounded-xl p-4 hover:shadow">
            <div className="text-sm text-muted-foreground">{v.vin}</div>
            <div className="font-medium">{v.year} {v.make} {v.model}{v.trim?` ${v.trim}`:''}</div>
            <div className="text-sm">{v.engine || '—'} • {v.transmission || '—'} • {v.fuelType || '—'}</div>
          </Link>
        ))}
      </div>
    </div>
  );
}
```

---

## 11) Vehicle detail page (shows AI insights)

**File:** `client/src/pages/vehicle-detail.tsx`

```tsx
import { useParams } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { api } from '@/lib/api';

export default function VehicleDetailPage(){
  const { id } = useParams<{id:string}>();
  const { data, isLoading, error } = useQuery({
    queryKey: ['/api/v1/vehicles', id],
    queryFn: () => api(`/vehicles/${id}`).then(r=>r.data),
  });

  if (isLoading) return <div className="p-6">Loading…</div>;
  if (error) return <div className="p-6 text-red-600">{String((error as Error).message)}</div>;
  const v = data;
  const ai = v?.aiInsights ?? null;

  return (
    <div className="p-6 space-y-6">
      <div>
        <div className="text-sm text-muted-foreground">{v.vin}</div>
        <h1 className="text-2xl font-semibold">{v.year} {v.make} {v.model}{v.trim?` ${v.trim}`:''}</h1>
        <div className="text-sm">{v.engine || '—'} • {v.transmission || '—'} • {v.fuelType || '—'} • {v.drivetrain || v.driveType || '—'}</div>
      </div>
      {ai && (
        <div className="border rounded-xl p-4 bg-muted/30">
          <div className="font-medium mb-2">AI Insights</div>
          <pre className="text-xs whitespace-pre-wrap">{JSON.stringify(ai, null, 2)}</pre>
        </div>
      )}
    </div>
  );
}
```

---

## 12) VIN modal — create‑from‑vin then navigate

Update your create handler to use `route()` and match `{ ok, data }` shape.

```ts
import { route } from 'wouter';
import { api } from '@/lib/api';

async function handleCreateFromVin(vinData: any, queryClient: any, setOpen: (b:boolean)=>void){
  const vehicle = vinData?.vehicle ?? vinData; // depends on your decode UI
  const aiInsights = vinData?.aiInsights ?? null;
  const resp = await api('/vehicles/create-from-vin', {
    method: 'POST',
    body: JSON.stringify({
      vin: vehicle.vin,
      year: vehicle.modelYear,
      make: vehicle.make,
      model: vehicle.model,
      trim: vehicle.trim,
      engine: vehicle.engine,
      transmission: vehicle.transmission,
      fuelType: vehicle.fuelType,
      bodyStyle: vehicle.bodyClass,
      drivetrain: vehicle.driveType,
      mileage: vehicle.mileage ?? 0,
      aiInsights,
    })
  });
  const id = resp.data?.id;
  queryClient.invalidateQueries({ queryKey: ['/api/v1/vehicles'] });
  setOpen(false);
  if (id) route(`/vehicles/${id}`);
}
```

---

## 13) Google Sign‑In render guard

Only render the GSI button when the client id is present.

```tsx
const cid = import.meta.env.VITE_GOOGLE_CLIENT_ID as string | undefined;
return cid ? (
  <div id="g_id_onload" data-client_id={cid} data-auto_prompt="false" />
) : null;
```

---

## 14) Acceptance checklist

* [ ] All endpoints served under **/api/v1**; client **does not** hardcode `/api/v1` in paths, only in `API_BASE`.
* [ ] Deep-linking `/vehicles` and `/vehicles/:id` works in dev + prod (SPA fallback).
* [ ] After create‑from‑vin → navigates to detail; list shows the new vehicle.
* [ ] VIN transmission shows **Manual/DCT/AMT/CVT** when applicable (e.g., not defaulting to Automatic).
* [ ] API responses follow `{ ok, data }`; error toasts show clear messages.
* [ ] No CSP blocks for Google Sign‑In; button only shows if `VITE_GOOGLE_CLIENT_ID` exists.

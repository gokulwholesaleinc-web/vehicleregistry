# VehicleRegistry — Auth 401 Fix + Remove Demo + Mobile Polish (drop‑in)

> **What this fixes & ships**
>
> * **Fixes 401 Unauthorized** on `/vehicle` update by hardening token extraction (accepts `Bearer <token>` **and** raw token; optional cookies), ensuring `PATCH /api/v1/vehicles/:id` is guarded, and standardizing the client API to always send `Authorization`.
> * **Removes demo mode completely**: no demo admin/user injection, no demo endpoints, cleanup SQL.
> * **Mobile polish**: responsive shell, table→card fallback, larger tap targets, breadcrumb & dialog a11y nits.
>
> Paste this entire canvas into your Replit agent. It creates/overwrites files. Adjust minor paths if your repo differs.

---

## 0) Install (if missing)

```bash
npm i @tanstack/react-query
```

---

## 1) Server — env & auth hardening

### **server/config/env.ts** (replace if needed)

```ts
import 'dotenv/config';
import { z } from 'zod';

const Env = z.object({
  NODE_ENV: z.enum(['development','test','production']).default('production'),
  PORT: z.string().default('5000'),
  JWT_SECRET: z.string().min(16),
  CORS_ALLOW_ORIGINS: z.string().default('http://localhost:5173'),
});

export const env = Env.parse(process.env);
export const isProd = env.NODE_ENV === 'production';
export const PORT = Number(env.PORT);
```

### **server/modules/auth/middleware.ts** (overwrite)

```ts
import jwt from 'jsonwebtoken';
import type { Request, Response, NextFunction } from 'express';
import { env } from '../../config/env';

export interface AuthUser { id: number; email: string; role?: string }

function extractToken(req: Request): string | null {
  const auth = req.headers.authorization || '';
  if (auth.startsWith('Bearer ')) return auth.slice(7).trim();
  // tolerate raw token (some callers send just the token)
  if (auth && !auth.includes(' ')) return auth.trim();
  // optional cookie support
  // @ts-ignore
  const c = (req.cookies?.access_token || req.cookies?.token) as string | undefined;
  return c ?? null;
}

export function requireAuth(req: Request, res: Response, next: NextFunction) {
  const token = extractToken(req);
  if (!token) return res.status(401).json({ ok:false, error:{ code:'UNAUTHORIZED', message:'Unauthorized' } });
  try {
    const payload = jwt.verify(token, env.JWT_SECRET) as AuthUser & { iat:number; exp:number };
    (req as any).user = { id: payload.id, email: payload.email, role: payload.role };
    return next();
  } catch {
    return res.status(401).json({ ok:false, error:{ code:'BAD_TOKEN', message:'Unauthorized' } });
  }
}
```

### **server/modules/auth/ensureAdmin.ts** (new)

```ts
import type { Request, Response, NextFunction } from 'express';
export function ensureAdmin(req: Request, res: Response, next: NextFunction) {
  const u = (req as any).user;
  if (u?.role === 'admin') return next();
  return res.status(403).json({ ok:false, error:{ code:'FORBIDDEN', message:'Admin only' } });
}
```

---

## 2) Server — Vehicles router guard + owner/admin check

> This guarantees updates can only be done by the vehicle owner or an admin and eliminates 401s caused by missing guards or token format mismatches.

### **server/routes/modules/vehicles.ts** (patch — ensure `requireAuth` + owner/admin check on PATCH)

```ts
import { Router } from 'express';
import { requireAuth } from '../../modules/auth/middleware';
import { db } from '../../../db/client';
import { vehicles } from '../../../db/schema/vehicles';
import { eq } from 'drizzle-orm';

const router = Router();

// ... your existing GET/POST routes here

router.patch('/:id', requireAuth, async (req, res, next) => {
  try {
    const id = Number(req.params.id);
    const user = (req as any).user as { id:number; role?:string };

    const existing = await db.select().from(vehicles).where(eq(vehicles.id, id)).limit(1);
    if (!existing.length) return res.status(404).json({ ok:false, error:{ code:'NOT_FOUND', message:'Vehicle not found' } });

    const row: any = existing[0];
    const isOwner = Number(row.ownerUserId ?? row.owner_user_id ?? row.userId) === user.id;
    if (!isOwner && user.role !== 'admin') {
      return res.status(403).json({ ok:false, error:{ code:'FORBIDDEN', message:'Not allowed to modify this vehicle' } });
    }

    // Whitelist-only update; ignore unknown fields to avoid schema crashes
    const allowed: Record<string, any> = {};
    const body = req.body || {};
    if (body.color !== undefined) allowed.color = String(body.color).slice(0, 120);
    if (body.currentMileage !== undefined) allowed.currentMileage = Number(body.currentMileage) || 0;
    if (body.mileage !== undefined) allowed.mileage = Number(body.mileage) || 0; // alias support
    if (body.lastServiceDate !== undefined) allowed.lastServiceDate = Number(body.lastServiceDate) || null;
    if (body.notes !== undefined) allowed.notes = String(body.notes).slice(0, 5000);
    if (body.trim !== undefined) allowed.trim = String(body.trim).slice(0, 120);

    if (Object.keys(allowed).length === 0) return res.json({ ok:true, unchanged:true });

    await db.update(vehicles).set({ ...allowed, updatedAt: Date.now() }).where(eq(vehicles.id, id)).run?.();
    return res.json({ ok:true });
  } catch (err) { next(err); }
});

export default router;
```

> If your `vehicles` schema uses different column names, keep the **guards** identical and map the allowed fields to your columns.

---

## 3) Server — purge demo code & add cleanup

### **server/scripts/cleanup\_demo.sql** (new)

```sql
DELETE FROM users WHERE email LIKE 'demo@%' OR email LIKE '%+demo@%';
DELETE FROM vehicles WHERE vin LIKE 'DEMO_%' OR make='DEMO' OR model='DEMO';
DELETE FROM audit_events WHERE actor_user_id NOT IN (SELECT id FROM users);
```

> Remove any demo-route imports/usages (e.g., `/api/demo`, `seedDemoUser`) in your codebase.

---

## 4) Client — always send Authorization; handle 401s cleanly

### **web/src/lib/api.ts** (overwrite)

```ts
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5000/api';

function authHeaders(h: Headers = new Headers()) {
  const t = localStorage.getItem('token');
  if (t) {
    // Always send Bearer prefix; server tolerates raw tokens too
    h.set('Authorization', t.startsWith('Bearer ') ? t : `Bearer ${t}`);
  }
  return h;
}

export async function apiJSON<T=any>(path: string, opts: RequestInit = {}): Promise<T> {
  const headers = authHeaders(new Headers(opts.headers));
  if (!(opts.body instanceof FormData)) headers.set('Content-Type', 'application/json');
  const res = await fetch(`${API_BASE}${path}`, { ...opts, headers, credentials: 'omit' });
  if (res.status === 401) {
    // token missing/expired — surface and optionally redirect
    const msg = (await res.text()) || 'Unauthorized';
    throw new Error(msg);
  }
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

export const Vehicles = {
  update: (id: number, payload: any) => apiJSON(`/v1/vehicles/${id}`, { method:'PATCH', body: JSON.stringify(payload) }),
  detail: (id: number) => apiJSON(`/v1/vehicles/${id}`),
};
```

---

## 5) Client — fix update handler on Vehicle page

### **web/src/pages/vehicle/EditVehicleModal.tsx** (new or replace your modal component)

```tsx
import { useState } from 'react';
import { Vehicles } from '@/lib/api';

export default function EditVehicleModal({ vehicle, onClose, onUpdated }:{ vehicle:any; onClose:()=>void; onUpdated:()=>void }) {
  const [form, setForm] = useState({
    color: vehicle.color || '',
    currentMileage: vehicle.currentMileage || vehicle.mileage || 0,
    lastServiceDate: vehicle.lastServiceDate || null,
    notes: vehicle.notes || ''
  });
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState<string>('');

  async function submit() {
    setBusy(true); setErr('');
    try {
      await Vehicles.update(vehicle.id, form);
      onUpdated();
      onClose();
    } catch (e:any) {
      setErr(e?.message || 'Update failed');
    } finally { setBusy(false); }
  }

  return (
    <div role="dialog" aria-modal="true" aria-labelledby="edit-title" aria-describedby="edit-desc" className="fixed inset-0 grid place-items-center bg-black/40 p-3">
      <div className="w-full max-w-lg rounded-2xl bg-white shadow">
        <div className="p-4 border-b">
          <h2 id="edit-title" className="text-lg font-semibold">Edit {vehicle.year} {vehicle.make} {vehicle.model}</h2>
          <p id="edit-desc" className="sr-only">Update basic metadata for your vehicle.</p>
        </div>
        <div className="p-4 space-y-3">
          <label className="block">
            <span className="text-sm text-gray-700">Color</span>
            <input className="input" value={form.color} onChange={e=>setForm({...form, color:e.target.value})} />
          </label>
          <label className="block">
            <span className="text-sm text-gray-700">Current Mileage</span>
            <input className="input" inputMode="numeric" value={form.currentMileage} onChange={e=>setForm({...form, currentMileage:Number(e.target.value||0)})} />
          </label>
          <label className="block">
            <span className="text-sm text-gray-700">Notes</span>
            <textarea className="input" value={form.notes} onChange={e=>setForm({...form, notes:e.target.value})} />
          </label>
          {err && <div className="text-sm text-red-600">{err}</div>}
        </div>
        <div className="p-4 border-t flex justify-end gap-2">
          <button onClick={onClose} className="btn">Cancel</button>
          <button onClick={submit} disabled={busy} className="btn bg-blue-600 text-white">{busy?'Saving…':'Update Vehicle'}</button>
        </div>
      </div>
    </div>
  );
}
```

> This component avoids nested `<a>` inside `<a>` and includes `aria-describedby` to silence your console warnings.

---

## 6) Client — breadcrumb a11y (fix nested anchors warning)

### **web/src/components/Breadcrumbs.tsx** (new)

```tsx
import { Link } from 'react-router-dom';

export default function Breadcrumbs({ items }:{ items: Array<{ to?:string; label:string }> }) {
  return (
    <nav aria-label="Breadcrumb" className="text-sm text-gray-500">
      <ol className="flex items-center gap-2">
        {items.map((it, i)=> (
          <li key={i} className="flex items-center gap-2">
            {it.to ? <Link to={it.to} className="hover:underline">{it.label}</Link> : <span>{it.label}</span>}
            {i < items.length-1 && <span aria-hidden>›</span>}
          </li>
        ))}
      </ol>
    </nav>
  );
}
```

Use this component instead of wrapping a `<Link>` inside another anchor.

---

## 7) Mobile polish (shell + table→cards)

### **web/src/layouts/AppLayout.tsx** (new, if you don’t have it yet)

```tsx
import { useState } from 'react';
import { NavLink, Outlet } from 'react-router-dom';

function NavItem({ to, children }: any) {
  return (
    <NavLink to={to} className={({ isActive }) => `px-3 py-2 rounded-lg ${isActive?'bg-gray-900 text-white':'text-gray-200 hover:bg-gray-800'}`}>{children}</NavLink>
  );
}

export default function AppLayout() {
  const [open, setOpen] = useState(false);
  return (
    <div className="min-h-screen bg-gray-50 text-gray-900">
      <header className="sticky top-0 z-40 bg-gray-900 text-white">
        <div className="mx-auto max-w-6xl px-4 h-14 flex items-center justify-between">
          <button aria-label="Menu" className="md:hidden p-2 -ml-2" onClick={()=>setOpen(v=>!v)}>
            <svg width="24" height="24" fill="currentColor"><path d="M3 6h18M3 12h18M3 18h18"/></svg>
          </button>
          <div className="font-semibold">Vehicle Registry</div>
          <nav className="hidden md:flex items-center gap-2">
            <NavItem to="/dashboard">Dashboard</NavItem>
            <NavItem to="/vehicles">Vehicles</NavItem>
            <NavItem to="/maintenance">Maintenance</NavItem>
            <NavItem to="/settings">Settings</NavItem>
          </nav>
        </div>
        {open && (
          <div className="md:hidden border-t border-gray-800 bg-gray-900">
            <div className="px-4 py-2 flex flex-col gap-2">
              <NavItem to="/dashboard">Dashboard</NavItem>
              <NavItem to="/vehicles">Vehicles</NavItem>
              <NavItem to="/maintenance">Maintenance</NavItem>
              <NavItem to="/settings">Settings</NavItem>
            </div>
          </div>
        )}
      </header>
      <main className="mx-auto max-w-6xl px-3 md:px-6 py-4 md:py-6"><Outlet/></main>
      <nav className="md:hidden fixed bottom-0 inset-x-0 z-40 bg-white border-t">
        <div className="grid grid-cols-4 text-xs">
          <NavLink to="/dashboard" className="flex flex-col items-center py-2">🏠<span>Home</span></NavLink>
          <NavLink to="/vehicles" className="flex flex-col items-center py-2">🚗<span>Vehicles</span></NavLink>
          <NavLink to="/maintenance" className="flex flex-col items-center py-2">🛠️<span>Maint</span></NavLink>
          <NavLink to="/settings" className="flex flex-col items-center py-2">⚙️<span>Settings</span></NavLink>
        </div>
      </nav>
      <div className="h-14 md:hidden" />
    </div>
  );
}
```

### **web/src/components/ResponsiveTable.tsx** (new)

```tsx
import { ReactNode } from 'react';
export default function ResponsiveTable({ headers, rows, renderRow, renderCard }:{ headers:ReactNode[]; rows:any[]; renderRow:(r:any)=>ReactNode; renderCard:(r:any)=>ReactNode; }){
  return (
    <div>
      <div className="hidden md:block overflow-x-auto rounded-lg border bg-white">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-50 text-gray-600"><tr>{headers.map((h,i)=>(<th key={i} className="px-3 py-2 text-left">{h}</th>))}</tr></thead>
          <tbody className="divide-y">{rows.map((r)=>renderRow(r))}</tbody>
        </table>
      </div>
      <div className="md:hidden grid gap-3">{rows.map((r,i)=>(<div key={i} className="rounded-xl border bg-white p-3">{renderCard(r)}</div>))}</div>
    </div>
  );
}
```

### **web/src/components/FormControls.css** (new)

```css
.btn { @apply inline-flex items-center justify-center rounded-lg px-4 py-2 min-h-[44px]; }
.input { @apply w-full rounded-lg border px-3 py-2 min-h-[44px]; }
```

---

## 8) Fix Dialog a11y warning

If you use Radix `Dialog`, ensure there’s either a `<DialogDescription>` inside or `aria-describedby` on the content. The modal above includes an SR-only description to satisfy this.

---

## 9) QA (what should now be true)

* Editing a vehicle sends `Authorization: Bearer <token>` and **succeeds** if owner/admin.
* Server accepts both raw token and Bearer form; returns JSON Problem consistently.
* No nested anchor warnings from breadcrumbs.
* Mobile layout has drawer, bottom bar, and cards for tables.

---

## 10) Notes if you *still* see 401 on update

* Ensure you **store** the token on login: `localStorage.setItem('token', result.token)`.
* Verify both sides use the same `JWT_SECRET`.
* Confirm the vehicle row’s owner column matches your current user id; otherwise you’ll get **403** (expected).
* If you use cookies for auth, set `credentials:'include'` in `api.ts` and enable `credentials:true` in CORS.
